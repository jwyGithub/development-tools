name: Release

on:
    push:
        tags:
            # 支持 giter-v*, ziper-v* 等格式的标签
            - '*-v*'

# 添加全局权限配置
permissions:
    contents: write
    packages: write

jobs:
    get-project:
        runs-on: ubuntu-latest
        outputs:
            project: ${{ steps.set-project.outputs.project }}
            version: ${{ steps.set-version.outputs.version }}
        steps:
            - name: Get project and version from tag
              id: set-project
              run: |
                  TAG=${{ github.ref_name }}
                  PROJECT=$(echo $TAG | cut -d'-' -f1)
                  VERSION=$(echo $TAG | cut -d'-' -f2)
                  echo "project=$PROJECT" >> $GITHUB_OUTPUT
                  echo "Selected project: $PROJECT"

            - name: Set version
              id: set-version
              run: |
                  TAG=${{ github.ref_name }}
                  VERSION=$(echo $TAG | cut -d'-' -f2 | sed 's/^v//')
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Version: $VERSION"

    build:
        needs: get-project
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      arch: x86_64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      arch: aarch64
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      arch: x86_64
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      arch: aarch64
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      arch: x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      arch: aarch64

        steps:
            - uses: actions/checkout@v4

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            # 安装 Linux ARM64 交叉编译工具
            - name: Install cross-compilation tools (Ubuntu ARM64)
              if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                  echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
                  echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
                  echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

            - name: Build Release
              shell: bash
              id: build
              run: |
                  PROJECT=${{ needs.get-project.outputs.project }}
                  VERSION=${{ needs.get-project.outputs.version }}
                  
                  echo "Current directory: $(pwd)"
                  echo "Project: $PROJECT"
                  echo "Version: $VERSION"
                  
                  # 检查项目目录
                  if [ ! -d "package/$PROJECT" ]; then
                    echo "Error: Project directory package/$PROJECT does not exist"
                    ls -la package/
                    exit 1
                  fi
                  
                  cd package/$PROJECT
                  echo "Changed to directory: $(pwd)"
                  
                  # 获取 Cargo.toml 中的项目名称
                  BINARY_NAME=$(grep "^name\s*=" Cargo.toml | head -n1 | cut -d'"' -f2 || echo "$PROJECT")
                  echo "Binary name from Cargo.toml: $BINARY_NAME"
                  echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
                  
                  # 设置输出文件名
                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                    OUTPUT_NAME="${BINARY_NAME}-${VERSION}-${{ matrix.target }}.exe"
                  else
                    OUTPUT_NAME="${BINARY_NAME}-${VERSION}-${{ matrix.target }}"
                  fi
                  
                  echo "Output name: $OUTPUT_NAME"
                  
                  # 构建
                  echo "Building target: ${{ matrix.target }}"
                  if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "aarch64" ]; then
                    RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc" cargo build --release --target ${{ matrix.target }}
                  else
                    cargo build --release --target ${{ matrix.target }}
                  fi
                  
                  # 验证构建结果
                  if [ $? -ne 0 ]; then
                    echo "Error: Cargo build failed"
                    exit 1
                  fi
                  
                  # 复制构建产物
                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                    cp "target/${{ matrix.target }}/release/${BINARY_NAME}.exe" "$OUTPUT_NAME"
                  else
                    cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "$OUTPUT_NAME"
                  fi

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ needs.get-project.outputs.project }}-${{ matrix.target }}
                  path: package/${{ needs.get-project.outputs.project }}/${{ steps.build.outputs.binary_name }}-*

    release:
        needs: [get-project, build]
        runs-on: ubuntu-latest
        # 添加 release job 的权限配置
        permissions:
            contents: write
            packages: write
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              
            - name: Create Release
              uses: softprops/action-gh-release@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  files: |
                      */*
                  name: ${{ needs.get-project.outputs.project }} ${{ needs.get-project.outputs.version }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true

