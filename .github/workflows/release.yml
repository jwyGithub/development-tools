name: Release Pipeline

on:
    push:
        tags:
            - '*-v*' # 保留原有标签匹配模式

env:
    CARGO_CACHE_KEY: cargo-${{ github.sha }}
    OSSL_VENDORED: 'false'

permissions:
    contents: write
    packages: write

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            project: ${{ steps.set-project.outputs.project }}
            semver: ${{ steps.set-version.outputs.semver }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # 完整克隆以正确解析标签

            - name: Parse Semantic Versioning
              id: set-version
              run: |
                  TAG="${GITHUB_REF#refs/tags/}"
                  # 增强版本号解析，兼容 v1.2.3-rc 等格式
                  if [[ "$TAG" =~ ([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?) ]]; then
                    SEMVER="${BASH_REMATCH[1]}"
                    echo "semver=$SEMVER" >> $GITHUB_OUTPUT
                  else
                    echo "::error::Invalid version format in tag: $TAG"
                    exit 1
                  fi

            - name: Extract Project Name
              id: set-project
              run: |
                  TAG="${GITHUB_REF#refs/tags/}"
                  PROJECT="${TAG%%-v*}"
                  echo "project=${PROJECT}" >> $GITHUB_OUTPUT

    build-base:
        needs: setup
        strategy:
            matrix:
                targets:
                    [
                        { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, cross: true },
                        { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, cross: true },
                        { os: windows-latest, target: x86_64-pc-windows-msvc, cross: false },
                        { os: windows-latest, target: aarch64-pc-windows-msvc, cross: false },
                        { os: macos-latest, target: x86_64-apple-darwin, cross: false },
                        { os: macos-latest, target: aarch64-apple-darwin, cross: false }
                    ]
            fail-fast: false

        runs-on: ${{ matrix.targets.os }}
        defaults:
            run:
                shell: bash

        steps:
            - uses: actions/checkout@v4

            - name: Cache Rust Dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ env.CARGO_CACHE_KEY }}

            - name: Install Cross-Compile Dependencies (Linux)
              if: contains(matrix.targets.os, 'ubuntu')
              run: |
                  sudo dpkg --add-architecture $(echo "${{ matrix.targets.target }}" | cut -d'-' -f1)
                  sudo apt-get update -y
                  sudo apt-get install -y \
                    libssl-dev:$(echo "${{ matrix.targets.target }}" | cut -d'-' -f1) \
                    gcc-$(echo "${{ matrix.targets.target }}" | cut -d'-' -f1)-linux-gnu

            - name: Setup Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  target: ${{ matrix.targets.target }}

            - name: Install cross (if needed)
              if: matrix.targets.cross
              run: cargo install cross --features vendored-openssl

            - name: Build Binary
              env:
                  CARGO_TARGET_DIR: ./target-cross # 防止与原生构建冲突
              run: |
                  PROJECT=${{ needs.setup.outputs.project }}
                  cd package/$PROJECT

                  BUILD_CMD="build"
                  [ "${{ matrix.targets.cross }}" = "true" ] && BUILD_CMD="cross build"

                  $BUILD_CMD \
                    --target ${{ matrix.targets.target }} \
                    --release \
                    --features ${{ env.OSSL_VENDORED }}

                  BIN_NAME=$(cargo metadata --format-version=1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")).name')
                  OUTPUT_FILE="artifact-${{ matrix.targets.target }}"

                  if [[ "${{ matrix.targets.os }}" =~ windows ]]; then
                    mv "./target-cross/${{ matrix.targets.target }}/release/${BIN_NAME}.exe" "${OUTPUT_FILE}.exe"
                  else
                    mv "./target-cross/${{ matrix.targets.target }}/release/${BIN_NAME}" "${OUTPUT_FILE}"
                  fi

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ needs.setup.outputs.project }}-${{ matrix.targets.target }}
                  path: package/${{ needs.setup.outputs.project }}/artifact-*

    release:
        needs: [setup, build-base]
        runs-on: ubuntu-latest
        steps:
            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Validate Checksums
              run: |
                  find artifacts -type f -print0 | xargs -0 shasum -a 256 > SHA256SUMS
                  echo "Checksum validation passed"

            - uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: '${{ needs.setup.outputs.project }} v${{ needs.setup.outputs.semver }}'
                  body: 'Multi-architecture builds for ${{ needs.setup.outputs.semver }}'
                  files: |
                      artifacts/*
                      SHA256SUMS
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

