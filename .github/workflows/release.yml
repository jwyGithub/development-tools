name: Release Pipeline

on:
    push:
        tags:
            - '*-v*' # 保留原有标签匹配模式

env:
    CARGO_CACHE_KEY: cargo-${{ github.sha }}
    OSSL_VENDORED: 'false'

permissions:
    contents: write
    packages: write

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            project: ${{ steps.set-project.outputs.project }}
            semver: ${{ steps.set-version.outputs.semver }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # 完整克隆以正确解析标签

            - name: Parse Semantic Versioning
              id: set-version
              run: |
                  TAG="${GITHUB_REF#refs/tags/}"
                  # 增强版本号解析，兼容 v1.2.3-rc 等格式
                  if [[ "$TAG" =~ ([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?) ]]; then
                    SEMVER="${BASH_REMATCH[1]}"
                    echo "semver=$SEMVER" >> $GITHUB_OUTPUT
                  else
                    echo "::error::Invalid version format in tag: $TAG"
                    exit 1
                  fi

            - name: Extract Project Name
              id: set-project
              run: |
                  TAG="${GITHUB_REF#refs/tags/}"
                  PROJECT="${TAG%%-v*}"
                  echo "project=${PROJECT}" >> $GITHUB_OUTPUT

    build-base:
        needs: setup
        strategy:
            matrix:
                targets:
                    [
                        { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, cross: true },
                        { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, cross: true }
                    ]
            fail-fast: false

        runs-on: ${{ matrix.targets.os }}
        steps:
            - uses: actions/checkout@v4

            # 新增清理步骤
            - name: Clean previous builds
              run: cargo clean

            - name: Install Cross Dependencies
              run: |
                  sudo dpkg --add-architecture $(echo "${{ matrix.targets.target }}" | cut -d'-' -f1)
                  sudo apt-get update
                  sudo apt-get install -y \
                    libssl-dev:$(echo "${{ matrix.targets.target }}" | cut -d'-' -f1) \
                    gcc-$(echo "${{ matrix.targets.target }}" | cut -d'-' -f1)-linux-gnu

            - name: Configure dynamic linking
              run: |
                  echo "/usr/lib/$(echo "${{ matrix.targets.target }}" | cut -d'-' -f1)-linux-gnu" | sudo tee /etc/ld.so.conf.d/cross.conf
                  sudo ldconfig

            - name: Build with openssl-sys vendored
              env:
                  OPENSSL_NO_VENDOR: 0 # 强制使用 vendored
              run: |
                  cross build \
                    --target ${{ matrix.targets.target }} \
                    --release \
                    -p ${{ needs.setup.outputs.project }}

    release:
        needs: [setup]
        runs-on: ubuntu-latest
        steps:
            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Validate Checksums
              run: |
                  find artifacts -type f -print0 | xargs -0 shasum -a 256 > SHA256SUMS
                  echo "Checksum validation passed"

            - uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: '${{ needs.setup.outputs.project }} v${{ needs.setup.outputs.semver }}'
                  body: 'Multi-architecture builds for ${{ needs.setup.outputs.semver }}'
                  files: |
                      artifacts/*
                      SHA256SUMS
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

